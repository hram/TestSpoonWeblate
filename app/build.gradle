apply plugin: 'com.android.application'
apply plugin: "com.jaredsburrows.spoon"

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "hram.testspoon"
        minSdkVersion 17
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation "com.squareup.spoon:spoon-client:2.0.0-SNAPSHOT"
}

spoon {
    title = "Для проверки работы spoon"

    if (project.hasProperty('spoonTitle')) {
        title = project.spoonTitle
    }

    if (project.hasProperty('spoonOutput')) {
        output = project.spoonOutput
    }

    // Test class name to run (fully-qualified).
    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName

        // Test method name to run (must also use className)
        if (project.hasProperty('spoonMethodName')) {
            methodName = project.spoonMethodName
        }
    }

    if (project.hasProperty('spoonPackageName')) {
        instrumentationArgs = ['package:' + project.spoonPackageName]
    }

    // Add device serials for test execution
    if (project.hasProperty('spoonDevices')) {
        def devicesList = []
        project.properties['spoonDevices'].split(',').each {
            devicesList << it
        }
        devices = devicesList
    }

    // Add device serials for skipping test execution
    if (project.hasProperty('spoonSkipDevices')) {
        def devicesList = []
        project.properties['spoonSkipDevices'].split(',').each {
            devicesList << it
        }
        skipDevices = devicesList
    }

    // Run annotated tests - small, medium, large
    if (project.hasProperty('spoonTestSize')) {
        testSize = project.spoonTestSize
    }
}